services:
  mongo:
    image: mongo:7
    container_name: mongo
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    command: ["mongod", "--replSet", "rs0", "--bind_ip_all"]
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 5s
      timeout: 3s
      retries: 10
    networks:
      - app-network

  mongo-init:
    image: mongo:7
    container_name: mongo-init
    depends_on:
      mongo:
        condition: service_healthy
    entrypoint: >
      bash -c "
        echo 'üå± Waiting for Mongo...';
        mongosh --host mongo --quiet --eval '
          try {
            rs.status();
            print(\"‚úÖ Replica Set already initialized.\");
          } catch (e) {
            if (e.codeName === \"NotYetInitialized\") {
              print(\"üõ† Initiating Replica Set...\");
              rs.initiate({_id: \"rs0\", members: [{ _id: 0, host: \"localhost:27017\" }]});
            } else {
              print(\"‚ùå Unexpected error: \" + e);
              quit(1);
            }
          }
        ';
      "
    restart: 'no'
    networks:
      - app-network

  redis:
    image: redis:7
    container_name: redis
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    networks:
      - app-network

  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - '80:80'
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - app
    networks:
      - app-network

  app:
    container_name: your-nest-app
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - '3000:3000'
    depends_on:
      mongo:
        condition: service_healthy
      mongo-init:
        condition: service_completed_successfully
      redis:
        condition: service_started
    env_file:
      - .env
    environment:
      - MONGO_URL=mongodb://mongo:27017/test?replicaSet=rs0
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - NODE_ENV=development
    volumes:
      - .:/app
    command: npm run start:dev
    networks:
      - app-network

volumes:
  mongo_data:
  redis_data:

networks:
  app-network:
    driver: bridge