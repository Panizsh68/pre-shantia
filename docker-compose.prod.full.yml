version: '3.8'

services:
  mongo:
    image: mongo:7.0
    container_name: mongo
    ports:
      - '127.0.0.1:27017:27017'
    volumes:
      - mongo-data:/data/db
      - ./mongo.conf:/etc/mongod.conf
      - ./mongo-keyfile:/etc/mongod.keyfile
    command: ['mongod', '--config', '/etc/mongod.conf']
    healthcheck:
      test: ['CMD', 'mongosh', '--eval', "db.adminCommand('ping')"]
      interval: 5s
      timeout: 3s
      retries: 10
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: shantia_ariaSakht0425
    networks:
      - app-network

  mongo-init:
    image: mongo:7.0
    container_name: mongo-init
    depends_on:
      mongo:
        condition: service_healthy
    entrypoint: >
      bash -c "
        mongosh --host mongo --username admin --password shantia_ariaSakht0425 --authenticationDatabase admin --eval '
          try {
            rs.status();
            print(\"Replica Set already initialized.\");
          } catch (e) {
            rs.initiate({
              _id: \"rs0\",
              members: [{ _id: 0, host: \"mongo:27017\" }]
            });
            sleep(2000);
          }
          const userExists = db.getSiblingDB(\"admin\").getUser(\"admin\");
          if (!userExists) {
            db.getSiblingDB(\"admin\").createUser({
              user: \"admin\",
              pwd: \"shantia_ariaSakht0425\",
              roles: [
                { role: \"readWrite\", db: \"test\" },
                { role: \"dbAdmin\", db: \"test\" }
              ]
            });
            print(\"User admin created.\");
          } else {
            print(\"User admin already exists.\");
          }
        '
      "
    restart: 'no'
    networks:
      - app-network

  redis:
    image: redis:7
    container_name: redis
    restart: always
    ports:
      - '127.0.0.1:6379:6379'
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    command: ['redis-server', '/usr/local/etc/redis/redis.conf']
    networks:
      - app-network

  app:
    container_name: app
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - .env.production
    environment:
      NODE_ENV: production
      MONGO_URL: mongodb://admin:shantia_ariaSakht0425@mongo:27017/test?replicaSet=rs0&authSource=admin
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: shantia_ariaSakht0425
    depends_on:
      mongo:
        condition: service_healthy
      mongo-init:
        condition: service_completed_successfully
      redis:
        condition: service_started
    expose:
      - '3000'
    networks:
      - app-network

  nginx:
    image: nginx:1.25
    container_name: nginx
    restart: always
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - /etc/letsencrypt:/etc/letsencrypt:ro
    depends_on:
      - app
    networks:
      - app-network

volumes:
  mongo-data:
  redis_data:

networks:
  app-network:
    driver: bridge
