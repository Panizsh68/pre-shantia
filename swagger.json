{
  "openapi": "3.0.0",
  "paths": {
    "/api": {
      "get": {
        "operationId": "AppController_getHello",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "App"
        ]
      }
    },
    "/api/health/mongo": {
      "get": {
        "operationId": "HealthController_checkMongoConnection",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Health"
        ]
      }
    },
    "/api/health/cache-store": {
      "get": {
        "operationId": "HealthController_checkCacheStore",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Health"
        ]
      }
    },
    "/api/health/redis": {
      "get": {
        "operationId": "HealthController_checkRedis",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Health"
        ]
      }
    },
    "/api/health/config": {
      "get": {
        "operationId": "HealthController_checkConfig",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Health"
        ]
      }
    },
    "/api/health/jwt": {
      "get": {
        "operationId": "HealthController_checkJwt",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Health"
        ]
      }
    },
    "/api/auth/signup": {
      "post": {
        "operationId": "AuthController_signUp",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User registered successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SignUpResponseDto"
                }
              }
            }
          }
        },
        "summary": "Register a new user",
        "tags": [
          "Auth"
        ]
      }
    },
    "/api/auth/signin": {
      "post": {
        "operationId": "AuthController_signIn",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SignInDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User signed in successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SignInResponseDto"
                }
              }
            }
          }
        },
        "summary": "Sign in with credentials",
        "tags": [
          "Auth"
        ]
      }
    },
    "/api/auth/verify-otp": {
      "post": {
        "operationId": "AuthController_verifyOtp",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyOtpDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OTP verified successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Verify OTP code",
        "tags": [
          "Auth"
        ]
      }
    },
    "/api/auth/refresh": {
      "post": {
        "operationId": "AuthController_refreshToken",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "refreshToken": {
                    "type": "string",
                    "example": "your-refresh-token"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "New access token generated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Refresh access token using a refresh token",
        "tags": [
          "Auth"
        ]
      }
    },
    "/api/auth/signout": {
      "post": {
        "operationId": "AuthController_signOut",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Successfully signed out"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Sign out user and invalidate refresh token",
        "tags": [
          "Auth"
        ]
      }
    },
    "/api/auth/me": {
      "get": {
        "operationId": "AuthController_getProfile",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "userId": {
                      "type": "string",
                      "example": "123456789"
                    },
                    "permissions": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "resource": {
                            "type": "string",
                            "example": "orders"
                          },
                          "actions": {
                            "type": "array",
                            "items": {
                              "type": "string",
                              "example": "r"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Get current user profile and permissions",
        "tags": [
          "Auth"
        ]
      }
    },
    "/api/auth/admin-signup": {
      "post": {
        "operationId": "AuthController_adminSignUp",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SignUpDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User with permissions created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SignUpResponseDto"
                }
              }
            }
          }
        },
        "summary": "Admin creates a user with permissions",
        "tags": [
          "Auth"
        ]
      }
    },
    "/api/profile": {
      "post": {
        "operationId": "ProfileController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProfileDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "Profile"
        ]
      }
    },
    "/api/profile/{id}": {
      "patch": {
        "operationId": "ProfileController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProfileDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Profile"
        ]
      }
    },
    "/api/profile/{userId}": {
      "delete": {
        "operationId": "ProfileController_deleteByUserId",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Profile"
        ]
      }
    },
    "/api/products": {
      "post": {
        "operationId": "ProductsController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProductDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Product created successfully"
          }
        },
        "summary": "Create a new product",
        "tags": [
          "Products"
        ]
      },
      "get": {
        "operationId": "ProductsController_findAll",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "example": "10",
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "schema": {
              "example": "2",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of products returned"
          }
        },
        "summary": "Get a paginated list of products",
        "tags": [
          "Products"
        ]
      }
    },
    "/api/products/{id}": {
      "get": {
        "operationId": "ProductsController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Product found"
          },
          "404": {
            "description": "Product not found"
          }
        },
        "summary": "Get product by ID",
        "tags": [
          "Products"
        ]
      },
      "patch": {
        "operationId": "ProductsController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProductDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Product updated"
          }
        },
        "summary": "Update product by ID",
        "tags": [
          "Products"
        ]
      },
      "delete": {
        "operationId": "ProductsController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Product deleted"
          }
        },
        "summary": "Delete product by ID",
        "tags": [
          "Products"
        ]
      }
    },
    "/api/products/count/category/{categoryId}": {
      "get": {
        "operationId": "ProductsController_countByCategory",
        "parameters": [
          {
            "name": "categoryId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Number of products returned"
          }
        },
        "summary": "Count products by category ID",
        "tags": [
          "Products"
        ]
      }
    },
    "/api/products/top-sales": {
      "get": {
        "operationId": "ProductsController_getTopProducts",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "example": "5",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Top products returned"
          }
        },
        "summary": "Get top-selling products",
        "tags": [
          "Products"
        ]
      }
    },
    "/api/tickets": {
      "post": {
        "operationId": "TicketingController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTicketDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Ticket created successfully"
          }
        },
        "summary": "Create a new ticket",
        "tags": [
          "Tickets"
        ]
      },
      "get": {
        "operationId": "TicketingController_findAll",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of tickets returned"
          }
        },
        "summary": "Get all tickets (with optional filters)",
        "tags": [
          "Tickets"
        ]
      }
    },
    "/api/tickets/{id}": {
      "get": {
        "operationId": "TicketingController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ticket found"
          },
          "404": {
            "description": "Ticket not found"
          }
        },
        "summary": "Get a ticket by ID",
        "tags": [
          "Tickets"
        ]
      },
      "put": {
        "operationId": "TicketingController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTicketDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ticket updated successfully"
          }
        },
        "summary": "Update ticket by ID",
        "tags": [
          "Tickets"
        ]
      },
      "delete": {
        "operationId": "TicketingController_delete",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ticket deleted successfully"
          }
        },
        "summary": "Delete ticket by ID",
        "tags": [
          "Tickets"
        ]
      }
    },
    "/api/tickets/{id}/status": {
      "get": {
        "operationId": "TicketingController_findStatus",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ticket status returned"
          }
        },
        "summary": "Get status of a ticket by ID",
        "tags": [
          "Tickets"
        ]
      },
      "put": {
        "operationId": "TicketingController_updateStatus",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "string",
                    "enum": [
                      "open",
                      "in_progress",
                      "resolved",
                      "closed",
                      "reopened",
                      "escalated"
                    ],
                    "example": "open"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ticket status updated"
          }
        },
        "summary": "Update ticket status",
        "tags": [
          "Tickets"
        ]
      }
    },
    "/api/tickets/{id}/escalate": {
      "post": {
        "operationId": "TicketingController_escalateTicket",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ticket escalated"
          }
        },
        "summary": "Escalate a ticket to a higher level",
        "tags": [
          "Tickets"
        ]
      }
    },
    "/api/transportings": {
      "post": {
        "operationId": "TransportingsController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTransportingDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Transporting record created successfully"
          },
          "400": {
            "description": "Invalid input"
          }
        },
        "summary": "Create a new transporting record",
        "tags": [
          "transportings"
        ]
      },
      "patch": {
        "operationId": "TransportingsController_update",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTransportingDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Transporting record updated successfully"
          },
          "404": {
            "description": "Transporting record not found"
          }
        },
        "summary": "Update a transporting record",
        "tags": [
          "transportings"
        ]
      }
    },
    "/api/transportings/{id}": {
      "get": {
        "operationId": "TransportingsController_findById",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Transporting ID",
            "schema": {
              "example": "507f1f77bcf86cd799439011",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Transporting record found"
          },
          "404": {
            "description": "Transporting record not found"
          }
        },
        "summary": "Get transporting record by ID",
        "tags": [
          "transportings"
        ]
      }
    },
    "/api/transportings/order/{orderId}": {
      "get": {
        "operationId": "TransportingsController_findByOrderId",
        "parameters": [
          {
            "name": "orderId",
            "required": true,
            "in": "path",
            "description": "Order ID",
            "schema": {
              "example": "507f1f77bcf86cd799439012",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Transporting record found"
          },
          "404": {
            "description": "Transporting record not found"
          }
        },
        "summary": "Get transporting record by order ID",
        "tags": [
          "transportings"
        ]
      }
    },
    "/api/transportings/company/{companyId}": {
      "get": {
        "operationId": "TransportingsController_findByCompanyId",
        "parameters": [
          {
            "name": "companyId",
            "required": true,
            "in": "path",
            "description": "Company ID",
            "schema": {
              "example": "507f1f77bcf86cd799439013",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of transporting records found"
          },
          "404": {
            "description": "No transporting records found for the company"
          }
        },
        "summary": "Get transporting records by company ID",
        "tags": [
          "transportings"
        ]
      }
    },
    "/api/transportings/{id}/cancel": {
      "patch": {
        "operationId": "TransportingsController_cancel",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Transporting ID",
            "schema": {
              "example": "507f1f77bcf86cd799439011",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Transporting record canceled successfully"
          },
          "400": {
            "description": "Transporting record cannot be canceled"
          },
          "404": {
            "description": "Transporting record not found"
          }
        },
        "summary": "Cancel a transporting record",
        "tags": [
          "transportings"
        ]
      }
    },
    "/api/transportings/{id}/delivered": {
      "patch": {
        "operationId": "TransportingsController_markAsDelivered",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Transporting ID",
            "schema": {
              "example": "507f1f77bcf86cd799439011",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "estimatedDelivery": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Transporting record marked as delivered successfully"
          },
          "400": {
            "description": "Transporting record cannot be marked as delivered"
          },
          "404": {
            "description": "Transporting record not found"
          }
        },
        "summary": "Mark a transporting record as delivered",
        "tags": [
          "transportings"
        ]
      }
    },
    "/api/companies": {
      "post": {
        "operationId": "CompaniesController_createCompany",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Company"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Company created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Company"
                }
              }
            }
          }
        },
        "summary": "Create a new company",
        "tags": [
          "Companies"
        ]
      },
      "get": {
        "operationId": "CompaniesController_getAllCompanies",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of all companies",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Company"
                  }
                }
              }
            }
          }
        },
        "summary": "Get all companies",
        "tags": [
          "Companies"
        ]
      }
    },
    "/api/companies/{id}": {
      "patch": {
        "operationId": "CompaniesController_updateCompany",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Company ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Company"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Company updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Company"
                }
              }
            }
          }
        },
        "summary": "Update a company by ID",
        "tags": [
          "Companies"
        ]
      },
      "delete": {
        "operationId": "CompaniesController_deleteCompany",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Company ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Company deleted successfully"
          }
        },
        "summary": "Delete a company by ID",
        "tags": [
          "Companies"
        ]
      },
      "get": {
        "operationId": "CompaniesController_getCompanyById",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Company ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Company fetched successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Company"
                }
              }
            }
          }
        },
        "summary": "Get a company by ID",
        "tags": [
          "Companies"
        ]
      }
    },
    "/api/orders": {
      "post": {
        "operationId": "OrdersController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrderDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Order created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          }
        },
        "summary": "Create a new order",
        "tags": [
          "Orders"
        ]
      },
      "get": {
        "operationId": "OrdersController_find",
        "parameters": [
          {
            "name": "userId",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "companyId",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Orders found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Order"
                  }
                }
              }
            }
          }
        },
        "summary": "Find orders by userId or companyId",
        "tags": [
          "Orders"
        ]
      }
    },
    "/api/orders/{id}": {
      "get": {
        "operationId": "OrdersController_getById",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Order ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Order found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          }
        },
        "summary": "Get order by ID",
        "tags": [
          "Orders"
        ]
      },
      "patch": {
        "operationId": "OrdersController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Order ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOrderDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Order updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          }
        },
        "summary": "Update an order by ID",
        "tags": [
          "Orders"
        ]
      }
    },
    "/api/orders/{id}/cancel": {
      "patch": {
        "operationId": "OrdersController_cancel",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Order ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Order cancelled"
          }
        },
        "summary": "Cancel an order",
        "tags": [
          "Orders"
        ]
      }
    },
    "/api/orders/{id}/mark-paid": {
      "patch": {
        "operationId": "OrdersController_markAsPaid",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Order ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Order marked as paid"
          }
        },
        "summary": "Mark order as paid",
        "tags": [
          "Orders"
        ]
      }
    },
    "/api/orders/{id}/mark-shipped": {
      "patch": {
        "operationId": "OrdersController_markAsShipped",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Order ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "transportId": {
                    "type": "string",
                    "example": "transport_123"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Order marked as shipped"
          }
        },
        "summary": "Mark order as shipped",
        "tags": [
          "Orders"
        ]
      }
    },
    "/api/orders/{id}/mark-delivered": {
      "patch": {
        "operationId": "OrdersController_markAsDelivered",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Order ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Order marked as delivered"
          }
        },
        "summary": "Mark order as delivered",
        "tags": [
          "Orders"
        ]
      }
    },
    "/api/orders/{id}/refund": {
      "patch": {
        "operationId": "OrdersController_refund",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Order ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Order refunded"
          }
        },
        "summary": "Refund an order",
        "tags": [
          "Orders"
        ]
      }
    },
    "/api/orders/{id}/confirm-delivery": {
      "patch": {
        "operationId": "OrdersController_confirmDelivery",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Order ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "userId": {
                    "type": "string",
                    "example": "user_123"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Order delivery confirmed by user"
          }
        },
        "summary": "User confirms delivery of order",
        "tags": [
          "Orders"
        ]
      }
    },
    "/api/wallets": {
      "get": {
        "operationId": "WalletsController_getWallet",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Wallets"
        ]
      }
    },
    "/api/carts/active": {
      "get": {
        "operationId": "CartsController_getUserActiveCart",
        "parameters": [],
        "responses": {
          "200": {
            "description": "User active cart returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get the active cart for current user",
        "tags": [
          "Carts"
        ]
      }
    },
    "/api/carts/populated": {
      "get": {
        "operationId": "CartsController_getPopulatedCarts",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Populated carts list returned",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Cart"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get carts with populated related data for current user",
        "tags": [
          "Carts"
        ]
      }
    },
    "/api/carts/summary": {
      "get": {
        "operationId": "CartsController_getSummary",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Cart summary returned",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get summary of user carts",
        "tags": [
          "Carts"
        ]
      }
    },
    "/api/carts": {
      "post": {
        "operationId": "CartsController_createCart",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCartDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Cart created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new cart",
        "tags": [
          "Carts"
        ]
      },
      "patch": {
        "operationId": "CartsController_updateCart",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCartDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Cart updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update the user's cart partially",
        "tags": [
          "Carts"
        ]
      }
    },
    "/api/carts/items": {
      "post": {
        "operationId": "CartsController_addItem",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CartItemDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Item added to cart",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Add item to user's cart",
        "tags": [
          "Carts"
        ]
      }
    },
    "/api/carts/items/{productId}": {
      "delete": {
        "operationId": "CartsController_removeItem",
        "parameters": [
          {
            "name": "productId",
            "required": true,
            "in": "path",
            "description": "ID of the product to remove",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Item removed from cart",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Remove item from user's cart",
        "tags": [
          "Carts"
        ]
      }
    },
    "/api/carts/clear": {
      "delete": {
        "operationId": "CartsController_clearCart",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Cart cleared",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cart"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Clear all items from user's cart",
        "tags": [
          "Carts"
        ]
      }
    },
    "/api/carts/checkout": {
      "post": {
        "operationId": "CartsController_checkout",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Cart checked out successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Checkout the user's cart",
        "tags": [
          "Carts"
        ]
      }
    },
    "/api/payment/initiate": {
      "post": {
        "operationId": "PaymentController_initiatePayment",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InitiatePaymentDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Payment request created and redirect URL returned",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "authority": {
                      "type": "string",
                      "example": "A00000000000000000000000000123456789"
                    },
                    "redirectUrl": {
                      "type": "string",
                      "example": "https://www.zibal.ir/pg/StartPay/A00000000000000000000000000123456789"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Initiate a payment via Zibal",
        "tags": [
          "Payment"
        ]
      }
    },
    "/api/payment/callback": {
      "get": {
        "operationId": "PaymentController_handleCallback",
        "parameters": [
          {
            "name": "Authority",
            "required": true,
            "in": "query",
            "description": "Zibal authority token",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Status",
            "required": true,
            "in": "query",
            "description": "Payment status from Zibal",
            "schema": {
              "enum": [
                "OK",
                "NOK"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Payment verified or failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HandleCallbackResponseDto"
                }
              }
            }
          }
        },
        "summary": "Handle Zibal callback after payment",
        "tags": [
          "Payment"
        ]
      }
    },
    "/api/categories": {
      "post": {
        "operationId": "CategoriesController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Category"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Category created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Category"
                }
              }
            }
          }
        },
        "summary": "Create a new category",
        "tags": [
          "Categories"
        ]
      },
      "get": {
        "operationId": "CategoriesController_findAll",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of categories",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Category"
                  }
                }
              }
            }
          }
        },
        "summary": "Get all categories for current user",
        "tags": [
          "Categories"
        ]
      }
    },
    "/api/categories/{id}": {
      "get": {
        "operationId": "CategoriesController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Category ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Category found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Category"
                }
              }
            }
          }
        },
        "summary": "Get category by ID",
        "tags": [
          "Categories"
        ]
      },
      "patch": {
        "operationId": "CategoriesController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Category ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Category"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Category updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Category"
                }
              }
            }
          }
        },
        "summary": "Update category by ID",
        "tags": [
          "Categories"
        ]
      },
      "delete": {
        "operationId": "CategoriesController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Category ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Category deleted"
          }
        },
        "summary": "Delete category by ID",
        "tags": [
          "Categories"
        ]
      }
    },
    "/api/categories/{id}/status": {
      "patch": {
        "operationId": "CategoriesController_setStatus",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Category ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "string",
                    "enum": [
                      "active",
                      "inactive",
                      "draft"
                    ],
                    "example": "active"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Category status updated"
          }
        },
        "summary": "Set status for a category",
        "tags": [
          "Categories"
        ]
      }
    },
    "/api/categories/parent/{parentId}": {
      "get": {
        "operationId": "CategoriesController_findByParentId",
        "parameters": [
          {
            "name": "parentId",
            "required": true,
            "in": "path",
            "description": "Parent category ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of child categories",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Category"
                  }
                }
              }
            }
          }
        },
        "summary": "Get categories by parent ID",
        "tags": [
          "Categories"
        ]
      }
    }
  },
  "info": {
    "title": "practice",
    "description": "API documentation for my practice app",
    "version": "0.0.1",
    "contact": {}
  },
  "tags": [],
  "servers": [],
  "components": {
    "schemas": {
      "CreateUserDto": {
        "type": "object",
        "properties": {
          "phoneNumber": {
            "type": "string",
            "description": "Iranian phone number of the user",
            "example": "+989123456789"
          },
          "nationalId": {
            "type": "string",
            "description": "Iranian national ID (meli code)",
            "example": "2284280072"
          }
        },
        "required": [
          "phoneNumber",
          "nationalId"
        ]
      },
      "SignUpResponseDto": {
        "type": "object",
        "properties": {
          "phoneNumber": {
            "type": "string",
            "example": "1234567890",
            "description": "User phone number"
          }
        },
        "required": [
          "phoneNumber"
        ]
      },
      "SignInDto": {
        "type": "object",
        "properties": {
          "phoneNumber": {
            "type": "string",
            "description": "Iranian phone number of the user",
            "example": "+09123456789"
          }
        },
        "required": [
          "phoneNumber"
        ]
      },
      "SignInResponseDto": {
        "type": "object",
        "properties": {
          "phoneNumber": {
            "type": "string",
            "example": "1234567890",
            "description": "User phone number"
          }
        },
        "required": [
          "phoneNumber"
        ]
      },
      "VerifyOtpDto": {
        "type": "object",
        "properties": {
          "phoneNumber": {
            "type": "string",
            "description": "Iranian phone number of the user",
            "example": "09123456789"
          },
          "otp": {
            "type": "string",
            "description": "One-time password (OTP) for verification",
            "example": "1234"
          }
        },
        "required": [
          "phoneNumber",
          "otp"
        ]
      },
      "SignUpDto": {
        "type": "object",
        "properties": {
          "phoneNumber": {
            "type": "string",
            "description": "Iranian phone number of the user",
            "example": "+989123456789"
          },
          "nationalId": {
            "type": "string",
            "description": "Iranian national ID (meli code)",
            "example": "2284280072"
          },
          "permissions": {
            "type": "array",
            "description": "List of user permissions",
            "example": [
              {
                "resource": "carts",
                "actions": [
                  "r",
                  "m"
                ]
              },
              {
                "resource": "orders",
                "actions": [
                  "r"
                ]
              }
            ],
            "items": {
              "type": "object",
              "properties": {
                "resource": {
                  "type": "string",
                  "enum": [
                    "carts",
                    "categories",
                    "companies",
                    "orders",
                    "payment",
                    "products",
                    "roles",
                    "ticketing",
                    "transaction",
                    "transporting",
                    "users",
                    "wallets",
                    "all"
                  ]
                },
                "actions": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "r",
                      "u",
                      "c",
                      "d",
                      "m",
                      "dc",
                      "di",
                      "du"
                    ]
                  }
                }
              }
            }
          }
        },
        "required": [
          "phoneNumber",
          "nationalId"
        ]
      },
      "CreateProfileDto": {
        "type": "object",
        "properties": {
          "phoneNumber": {
            "type": "string",
            "description": "Iranian phone number of the user",
            "example": "+989123456789"
          },
          "nationalId": {
            "type": "string",
            "description": "National ID of the user",
            "example": "1234567890"
          },
          "firstName": {
            "type": "string",
            "description": "First name of the user",
            "example": "Ali"
          },
          "lastName": {
            "type": "string",
            "description": "Last name of the user",
            "example": "Hosseini"
          },
          "address": {
            "type": "string",
            "description": "Address of the user",
            "example": "Tehran, Valiasr St., No. 123"
          },
          "walletId": {
            "type": "string",
            "description": "Wallet ID associated with the user (optional)",
            "example": "507f1f77bcf86cd799439011"
          },
          "orders": {
            "description": "List of order IDs associated with the user",
            "example": [
              "507f1f77bcf86cd799439011",
              "507f1f77bcf86cd799439012"
            ],
            "default": [],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "transactions": {
            "description": "List of transaction IDs associated with the user",
            "example": [
              "507f1f77bcf86cd799439013",
              "507f1f77bcf86cd799439014"
            ],
            "default": [],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "favorites": {
            "description": "List of favorite product IDs",
            "example": [
              "507f1f77bcf86cd799439015",
              "507f1f77bcf86cd799439016"
            ],
            "default": [],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "cart": {
            "type": "string",
            "description": "ObjectId of user’s shopping cart",
            "example": "60f6c0c3d3b5e20017a0a3c2"
          }
        },
        "required": [
          "phoneNumber",
          "nationalId",
          "firstName",
          "lastName",
          "address",
          "orders",
          "transactions",
          "favorites",
          "cart"
        ]
      },
      "UpdateProfileDto": {
        "type": "object",
        "properties": {
          "phoneNumber": {
            "type": "string",
            "description": "Iranian phone number of the user",
            "example": "+989123456789"
          },
          "nationalId": {
            "type": "string",
            "description": "National ID of the user",
            "example": "1234567890"
          },
          "firstName": {
            "type": "string",
            "description": "First name of the user",
            "example": "Ali"
          },
          "lastName": {
            "type": "string",
            "description": "Last name of the user",
            "example": "Hosseini"
          },
          "address": {
            "type": "string",
            "description": "Address of the user",
            "example": "Tehran, Valiasr St., No. 123"
          },
          "walletId": {
            "type": "string",
            "description": "Wallet ID associated with the user (optional)",
            "example": "507f1f77bcf86cd799439011"
          },
          "orders": {
            "description": "List of order IDs associated with the user",
            "example": [
              "507f1f77bcf86cd799439011",
              "507f1f77bcf86cd799439012"
            ],
            "default": [],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "transactions": {
            "description": "List of transaction IDs associated with the user",
            "example": [
              "507f1f77bcf86cd799439013",
              "507f1f77bcf86cd799439014"
            ],
            "default": [],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "favorites": {
            "description": "List of favorite product IDs",
            "example": [
              "507f1f77bcf86cd799439015",
              "507f1f77bcf86cd799439016"
            ],
            "default": [],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "cart": {
            "type": "string",
            "description": "ObjectId of user’s shopping cart",
            "example": "60f6c0c3d3b5e20017a0a3c2"
          }
        }
      },
      "StockDto": {
        "type": "object",
        "properties": {
          "quantity": {
            "type": "number",
            "description": "Quantity of product in stock",
            "example": 500,
            "minimum": 0
          }
        },
        "required": [
          "quantity"
        ]
      },
      "VariantOptionDto": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "Value of the variant option",
            "example": "50 kg"
          },
          "priceModifier": {
            "type": "number",
            "description": "Price modifier for this option (in IRR)",
            "example": 0
          }
        },
        "required": [
          "value"
        ]
      },
      "VariantDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the variant",
            "example": "Packaging"
          },
          "options": {
            "description": "List of variant options",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VariantOptionDto"
            }
          }
        },
        "required": [
          "name",
          "options"
        ]
      },
      "ImageDto": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": "URL of the product image",
            "example": "https://example.com/cement-bag.jpg"
          }
        },
        "required": [
          "url"
        ]
      },
      "CreateProductDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the product",
            "example": "Cement Type 2"
          },
          "slug": {
            "type": "string",
            "description": "SEO-friendly unique slug for the product",
            "example": "cement-type-2"
          },
          "sku": {
            "type": "string",
            "description": "Stock Keeping Unit (SKU) code",
            "example": "CEM-T2-001"
          },
          "basePrice": {
            "type": "number",
            "description": "Base price of the product (in IRR)",
            "example": 2000000,
            "minimum": 0
          },
          "companyId": {
            "type": "string",
            "description": "MongoDB ObjectId of the supplier company",
            "example": "507f1f77bcf86cd799439011"
          },
          "categories": {
            "description": "List of category IDs",
            "example": [
              "507f1f77bcf86cd799439012"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "type": "string",
            "description": "Description of the product",
            "example": "High-strength Type 2 cement for concrete structures",
            "maxLength": 500
          },
          "stock": {
            "description": "Stock information for the product",
            "allOf": [
              {
                "$ref": "#/components/schemas/StockDto"
              }
            ]
          },
          "variants": {
            "description": "Product variants",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VariantDto"
            }
          },
          "attributes": {
            "type": "object",
            "description": "Custom attributes of the product",
            "example": {
              "strength": "42.5 MPa",
              "settingTime": "3 hours"
            }
          },
          "tags": {
            "description": "Tags for filtering and search",
            "example": [
              "cement",
              "construction"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "images": {
            "description": "Images associated with the product",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ImageDto"
            }
          },
          "comments": {
            "description": "User comments about the product",
            "example": [
              "Great quality!",
              "Fast delivery"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "rating": {
            "type": "number",
            "description": "Average rating of the product (1 to 5)",
            "example": 4.5,
            "minimum": 1,
            "maximum": 5
          },
          "status": {
            "type": "string",
            "description": "Status of the product",
            "enum": [
              "active",
              "inactive",
              "draft",
              "archived"
            ],
            "example": "draft"
          }
        },
        "required": [
          "name",
          "slug",
          "sku",
          "basePrice",
          "companyId",
          "stock"
        ]
      },
      "UpdateProductDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "MongoDB ObjectId of the product",
            "example": "507f1f77bcf86cd799439011"
          }
        },
        "required": [
          "id"
        ]
      },
      "CreateTicketDto": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Title of the ticket",
            "example": "Issue with payment"
          },
          "description": {
            "type": "string",
            "description": "Description of the ticket",
            "example": "Payment failed during checkout"
          },
          "status": {
            "type": "string",
            "description": "Status of the ticket",
            "enum": [
              "open",
              "in_progress",
              "resolved",
              "closed",
              "reopened",
              "escalated"
            ],
            "default": "open"
          },
          "priority": {
            "type": "string",
            "description": "Priority of the ticket",
            "enum": [
              "low",
              "medium",
              "high",
              "urgent"
            ],
            "default": "low"
          },
          "createdBy": {
            "type": "string",
            "description": "ID of the user who created the ticket",
            "example": "507f1f77bcf86cd799439011"
          },
          "assignedTo": {
            "type": "string",
            "description": "ID of the user assigned to the ticket",
            "example": "507f1f77bcf86cd799439012"
          }
        },
        "required": [
          "title",
          "description"
        ]
      },
      "UpdateTicketDto": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Title of the ticket",
            "example": "Updated issue with payment"
          },
          "description": {
            "type": "string",
            "description": "Description of the ticket",
            "example": "Updated description for payment issue"
          },
          "status": {
            "type": "string",
            "description": "Status of the ticket",
            "enum": [
              "open",
              "in_progress",
              "resolved",
              "closed",
              "reopened",
              "escalated"
            ],
            "example": "in_progress"
          },
          "priority": {
            "type": "string",
            "description": "Priority of the ticket",
            "enum": [
              "low",
              "medium",
              "high",
              "urgent"
            ],
            "example": "high"
          },
          "assignedTo": {
            "type": "string",
            "description": "ID of the user assigned to the ticket",
            "example": "507f1f77bcf86cd799439012"
          }
        }
      },
      "CreateTransportingDto": {
        "type": "object",
        "properties": {
          "orderId": {
            "type": "string",
            "description": "MongoDB ObjectId of the order associated with the shipment",
            "example": "507f1f77bcf86cd799439011"
          },
          "companyId": {
            "type": "string",
            "description": "MongoDB ObjectId of the company handling the shipment",
            "example": "507f1f77bcf86cd799439012"
          },
          "carrier": {
            "type": "string",
            "description": "Name of the carrier",
            "example": "DHL Express"
          },
          "trackingNumber": {
            "type": "string",
            "description": "Tracking number for the shipment",
            "example": "123456789"
          },
          "status": {
            "type": "string",
            "description": "Status of the shipment",
            "enum": [
              "pending",
              "shipped",
              "delivered",
              "canceled"
            ],
            "example": "shipped"
          },
          "estimatedDelivery": {
            "format": "date-time",
            "type": "string",
            "description": "Estimated delivery date for the shipment",
            "example": "2025-06-10"
          }
        },
        "required": [
          "orderId",
          "companyId",
          "carrier",
          "trackingNumber"
        ]
      },
      "UpdateTransportingDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "MongoDB ObjectId of the transporting record",
            "example": "507f1f77bcf86cd799439011"
          }
        },
        "required": [
          "id"
        ]
      },
      "Company": {
        "type": "object",
        "properties": {}
      },
      "OrderItemDto": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "string",
            "description": "MongoDB ObjectId of the product",
            "example": "507f1f77bcf86cd799439011"
          },
          "quantity": {
            "type": "number",
            "description": "Quantity of the product",
            "example": 2,
            "minimum": 1
          }
        },
        "required": [
          "productId",
          "quantity"
        ]
      },
      "CreateOrderDto": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": "MongoDB ObjectId of the user",
            "example": "507f1f77bcf86cd799439011"
          },
          "items": {
            "description": "List of order items",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderItemDto"
            }
          },
          "totalPrice": {
            "type": "number",
            "description": "Total price of the order (in IRR)",
            "example": 1500000,
            "minimum": 0
          },
          "status": {
            "type": "string",
            "description": "Status of the order",
            "enum": [
              "pending",
              "paid",
              "shipped",
              "delivered",
              "completed",
              "refunded",
              "canceled",
              "failed"
            ],
            "example": "pending"
          },
          "shippingAddress": {
            "type": "string",
            "description": "Shipping address for the order",
            "example": "123 Street, Tehran, Iran"
          },
          "paymentMethod": {
            "type": "string",
            "description": "Payment method used for the order",
            "example": "Credit Card"
          },
          "companyId": {
            "type": "string",
            "description": "MongoDB ObjectId of the supplier company",
            "example": "507f1f77bcf86cd799439011"
          },
          "transportId": {
            "type": "string",
            "description": "MongoDB ObjectId of the transport record",
            "example": "507f1f77bcf86cd799439011"
          }
        },
        "required": [
          "userId",
          "items",
          "totalPrice",
          "status",
          "companyId"
        ]
      },
      "Order": {
        "type": "object",
        "properties": {}
      },
      "UpdateOrderDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "MongoDB ObjectId of the order",
            "example": "507f1f77bcf86cd799439011"
          }
        },
        "required": [
          "id"
        ]
      },
      "Cart": {
        "type": "object",
        "properties": {}
      },
      "CartItemDto": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "string",
            "description": "MongoDB ObjectId of the product",
            "example": "507f1f77bcf86cd799439011"
          },
          "companyId": {
            "type": "string",
            "description": "MongoDB ObjectId of the supplier company",
            "example": "507f1f77bcf86cd799439011"
          },
          "quantity": {
            "type": "number",
            "description": "Quantity of the product in the cart",
            "example": 2,
            "minimum": 1
          },
          "priceAtAdd": {
            "type": "number",
            "description": "Price of the product at the time of adding to cart (in IRR)",
            "example": 2000000,
            "minimum": 0
          },
          "variant": {
            "type": "object",
            "description": "Selected variant of the product (e.g., size, packaging)",
            "example": {
              "name": "Packaging",
              "value": "50 kg"
            }
          },
          "notes": {
            "type": "string",
            "description": "Additional notes for the cart item",
            "example": "Urgent delivery required"
          },
          "discount": {
            "type": "object",
            "description": "Discount applied to the cart item",
            "example": {
              "type": "percentage",
              "value": 10
            }
          }
        },
        "required": [
          "productId",
          "companyId",
          "quantity",
          "priceAtAdd"
        ]
      },
      "CreateCartDto": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": "MongoDB ObjectId of the user owning the cart",
            "example": "507f1f77bcf86cd799439011"
          },
          "items": {
            "description": "List of items in the cart",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CartItemDto"
            }
          },
          "totalAmount": {
            "type": "number",
            "description": "Total amount of the cart (in IRR)",
            "example": 4000000,
            "minimum": 0
          },
          "status": {
            "type": "string",
            "description": "Status of the cart",
            "enum": [
              "active",
              "abandoned",
              "checked_out"
            ],
            "example": "active"
          }
        },
        "required": [
          "userId",
          "items"
        ]
      },
      "UpdateCartDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "MongoDB ObjectId of the cart",
            "example": "507f1f77bcf86cd799439011"
          }
        },
        "required": [
          "id"
        ]
      },
      "InitiatePaymentDto": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number"
          },
          "callbackUrl": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "mobile": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          },
          "orderId": {
            "type": "string"
          }
        },
        "required": [
          "amount",
          "callbackUrl",
          "description",
          "userId",
          "orderId"
        ]
      },
      "InitiatePaymentResponseDto": {
        "type": "object",
        "properties": {
          "authority": {
            "type": "string",
            "example": "A00000000000000000000000000123456789"
          },
          "redirectUrl": {
            "type": "string",
            "example": "https://www.zibal.ir/pg/StartPay/A00000000000000000000000000123456789"
          }
        },
        "required": [
          "authority",
          "redirectUrl"
        ]
      },
      "HandleCallbackResponseDto": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "message": {
            "type": "string",
            "example": "Payment verified successfully"
          },
          "data": {
            "$ref": "#/components/schemas/InitiatePaymentResponseDto"
          }
        },
        "required": [
          "success",
          "message",
          "data"
        ]
      },
      "Category": {
        "type": "object",
        "properties": {}
      }
    }
  }
}